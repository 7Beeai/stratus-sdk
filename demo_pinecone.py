#!/usr/bin/env python3
"""
Demonstra√ß√£o do PineconeMCPServer - Base Vetorial de Conhecimento Aeron√°utico
Testa todas as 23 ferramentas MCP implementadas com exemplos pr√°ticos de avia√ß√£o.
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, Any

from src.mcp_servers.pinecone_server import PineconeMCPServer, MCP_TOOLS
from src.utils.logging import get_logger

logger = get_logger()

class PineconeDemo:
    """Demonstra√ß√£o completa do PineconeMCPServer"""
    
    def __init__(self):
        self.server = None
        self.test_queries = {
            # GRUPO 1: REGULAMENTA√á√ÉO E NORMAS
            "ANAC": "Quais s√£o os requisitos para licen√ßa de piloto comercial?",
            "DECEA": "Procedimentos IFR para aproxima√ß√£o em SBSP",
            "ICAO": "Normas internacionais para opera√ß√µes noturnas",
            "ProcedimentosOperacionais": "Checklist de emerg√™ncia para falha de motor",
            
            # GRUPO 2: NAVEGA√á√ÉO E CARTAS
            "AIP_Brasil_Map": "Cartas de aproxima√ß√£o VOR para SBGR",
            "Jeppesen_Manuais": "Briefing de rota SBSP-SBGR",
            "Planejamento_de_Voo": "Planejamento de combust√≠vel para voo IFR",
            
            # GRUPO 3: AERONAVES E SISTEMAS
            "Manuais_Aeronaves_Equipamentos": "Performance da Cessna 172 em pista molhada",
            "InstrumentosAvionicosSistemasEletricos": "Funcionamento do sistema de navega√ß√£o GPS",
            "PesoBalanceamento_Performance": "C√°lculo de peso e balanceamento para C172",
            
            # GRUPO 4: COMUNICA√á√ÉO E OPERA√á√ïES ESPECIAIS
            "ComunicacoesAereas": "Fraseologia para emerg√™ncia m√©dica",
            "Anfibios_HidroAvioes": "Procedimentos de pouso em √°gua",
            "SoftSkills_Risk_Medical": "CRM em situa√ß√£o de emerg√™ncia",
            
            # GRUPO 5: FORMA√á√ÉO E EDUCA√á√ÉO
            "MaterialFormacao_BancaANAC_Simulados": "Quest√µes sobre meteorologia para prova ANAC",
            "InstrutoresDeVoo": "T√©cnicas de ensino para pouso de emerg√™ncia",
            "Exame SDEA ICAO ANAC": "Prepara√ß√£o para exame de profici√™ncia lingu√≠stica",
            "Miscelanea": "Hist√≥ria da avia√ß√£o brasileira"
        }
        
        self.multi_namespace_queries = {
            "Regulamenta√ß√£o": "RBAC 91 - Regras gerais de voo",
            "Navega√ß√£o": "Cartas aeron√°uticas para voo IFR",
            "Aeronaves": "Manuais de aeronave e performance",
            "Educa√ß√£o": "Material de estudo para pilotos",
            "Safety Critical": "Procedimentos de emerg√™ncia e seguran√ßa"
        }

    async def __aenter__(self):
        """Inicializar servidor"""
        self.server = PineconeMCPServer()
        await self.server.__aenter__()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Finalizar servidor"""
        if self.server:
            await self.server.__aexit__(exc_type, exc_val, exc_tb)

    async def test_individual_namespaces(self):
        """Testar busca em namespaces individuais"""
        print("\n" + "="*80)
        print("üß™ TESTE DE NAMESPACES INDIVIDUAIS (17 ferramentas)")
        print("="*80)
        
        results = {}
        
        for namespace, query in self.test_queries.items():
            try:
                print(f"\nüìã Testando namespace: {namespace}")
                print(f"   Query: {query}")
                
                # Usar m√©todo direto do servidor
                method_name = f"search_{namespace.lower().replace(' ', '_').replace('e_seus_anexos', '')}"
                if hasattr(self.server, method_name):
                    method = getattr(self.server, method_name)
                    result = await method(query, top_k=5, user_id="demo_user")
                else:
                    # Fallback para busca geral
                    result = await self.server.search_knowledge_base(query, [namespace], 5, "demo_user")
                
                results[namespace] = {
                    "success": True,
                    "namespaces_searched": result.namespaces_searched,
                    "total_results": result.total_results,
                    "search_time_ms": result.search_time_ms,
                    "cache_hit": result.cache_hit
                }
                
                print(f"   ‚úÖ Sucesso: {result.total_results} resultados em {result.search_time_ms:.1f}ms")
                print(f"   üìä Namespaces: {result.namespaces_searched}")
                print(f"   üíæ Cache hit: {result.cache_hit}")
                
                # Mostrar primeiros resultados
                for i, res in enumerate(result.results[:2]):
                    print(f"   üìÑ Resultado {i+1}: {res.content[:100]}... (score: {res.score:.3f})")
                
            except Exception as e:
                results[namespace] = {"success": False, "error": str(e)}
                print(f"   ‚ùå Erro: {str(e)}")
        
        return results

    async def test_multi_namespaces(self):
        """Testar busca em m√∫ltiplos namespaces"""
        print("\n" + "="*80)
        print("üåê TESTE DE M√öLTIPLOS NAMESPACES (5 ferramentas)")
        print("="*80)
        
        results = {}
        
        for category, query in self.multi_namespace_queries.items():
            try:
                print(f"\nüìã Testando categoria: {category}")
                print(f"   Query: {query}")
                
                # Usar m√©todo multi-namespace
                method_name = f"search_{category.lower().replace(' ', '_')}"
                if hasattr(self.server, method_name):
                    method = getattr(self.server, method_name)
                    result = await method(query, top_k=10, user_id="demo_user")
                else:
                    # Fallback para busca geral
                    result = await self.server.search_knowledge_base(query, None, 10, "demo_user")
                
                results[category] = {
                    "success": True,
                    "namespaces_searched": result.namespaces_searched,
                    "total_results": result.total_results,
                    "search_time_ms": result.search_time_ms,
                    "cache_hit": result.cache_hit
                }
                
                print(f"   ‚úÖ Sucesso: {result.total_results} resultados em {result.search_time_ms:.1f}ms")
                print(f"   üìä Namespaces: {result.namespaces_searched}")
                print(f"   üíæ Cache hit: {result.cache_hit}")
                
                # Mostrar primeiros resultados
                for i, res in enumerate(result.results[:3]):
                    print(f"   üìÑ Resultado {i+1}: {res.content[:80]}... (score: {res.score:.3f})")
                
            except Exception as e:
                results[category] = {"success": False, "error": str(e)}
                print(f"   ‚ùå Erro: {str(e)}")
        
        return results

    async def test_mcp_tools(self):
        """Testar ferramentas MCP diretamente"""
        print("\n" + "="*80)
        print("üîß TESTE DE FERRAMENTAS MCP (23 ferramentas)")
        print("="*80)
        
        results = {}
        
        # Testar algumas ferramentas MCP selecionadas
        test_tools = {
            "search_anac": "Regulamenta√ß√µes ANAC para pilotos privados",
            "search_decea": "Cartas DECEA para SBSP",
            "search_icao": "Normas ICAO para opera√ß√µes internacionais",
            "search_regulations": "Todas as regulamenta√ß√µes de avia√ß√£o",
            "search_safety_critical": "Procedimentos cr√≠ticos de seguran√ßa"
        }
        
        for tool_name, query in test_tools.items():
            try:
                print(f"\nüìã Testando ferramenta MCP: {tool_name}")
                print(f"   Query: {query}")
                
                # Usar ferramenta MCP
                tool_func = MCP_TOOLS[tool_name]
                result = await tool_func(query, top_k=5, user_id="demo_user")
                
                results[tool_name] = {
                    "success": True,
                    "namespaces_searched": result.get("namespaces_searched", []),
                    "total_results": result.get("total_results", 0),
                    "search_time_ms": result.get("search_time_ms", 0),
                    "cache_hit": result.get("cache_hit", False)
                }
                
                print(f"   ‚úÖ Sucesso: {result.get('total_results', 0)} resultados em {result.get('search_time_ms', 0):.1f}ms")
                print(f"   üìä Namespaces: {result.get('namespaces_searched', [])}")
                print(f"   üíæ Cache hit: {result.get('cache_hit', False)}")
                
            except Exception as e:
                results[tool_name] = {"success": False, "error": str(e)}
                print(f"   ‚ùå Erro: {str(e)}")
        
        return results

    async def test_aviation_context(self):
        """Testar extra√ß√£o de contexto aeron√°utico"""
        print("\n" + "="*80)
        print("‚úàÔ∏è TESTE DE CONTEXTO AERON√ÅUTICO")
        print("="*80)
        
        test_queries = [
            "Procedimentos de emerg√™ncia para C172 em SBSP",
            "RBAC 91 se√ß√£o 3 - Regras de voo visual",
            "Checklist de emerg√™ncia para falha de motor em voo IFR",
            "Comunica√ß√£o com ATC em situa√ß√£o de emerg√™ncia m√©dica",
            "Performance da aeronave em condi√ß√µes meteorol√≥gicas adversas"
        ]
        
        for query in test_queries:
            try:
                print(f"\nüìã Query: {query}")
                
                # Extrair contexto
                context = self.server._extract_aviation_context(query)
                
                print(f"   üè∑Ô∏è C√≥digos ICAO: {context['icao_codes']}")
                print(f"   ‚úàÔ∏è Tipos de aeronave: {context['aircraft_types']}")
                print(f"   üìú Regulamenta√ß√µes: {context['regulations']}")
                print(f"   ‚ö†Ô∏è Safety Critical: {context['safety_critical']}")
                
                # Selecionar namespaces relevantes
                relevant_namespaces = self.server._select_relevant_namespaces(query, context)
                print(f"   üéØ Namespaces relevantes: {relevant_namespaces}")
                
            except Exception as e:
                print(f"   ‚ùå Erro: {str(e)}")

    async def test_performance(self):
        """Testar performance e cache"""
        print("\n" + "="*80)
        print("‚ö° TESTE DE PERFORMANCE E CACHE")
        print("="*80)
        
        query = "Procedimentos de emerg√™ncia para falha de motor"
        
        # Primeira busca (sem cache)
        print(f"\nüìã Primeira busca: {query}")
        start_time = datetime.now()
        result1 = await self.server.search_safety_critical(query, top_k=10, user_id="demo_user")
        time1 = (datetime.now() - start_time).total_seconds() * 1000
        
        print(f"   ‚è±Ô∏è Tempo: {time1:.1f}ms")
        print(f"   üìä Resultados: {result1.total_results}")
        print(f"   üíæ Cache hit: {result1.cache_hit}")
        
        # Segunda busca (com cache)
        print(f"\nüìã Segunda busca (cache): {query}")
        start_time = datetime.now()
        result2 = await self.server.search_safety_critical(query, top_k=10, user_id="demo_user")
        time2 = (datetime.now() - start_time).total_seconds() * 1000
        
        print(f"   ‚è±Ô∏è Tempo: {time2:.1f}ms")
        print(f"   üìä Resultados: {result2.total_results}")
        print(f"   üíæ Cache hit: {result2.cache_hit}")
        
        # Compara√ß√£o
        if time1 > 0:
            speedup = time1 / time2 if time2 > 0 else float('inf')
            print(f"   üöÄ Speedup: {speedup:.1f}x mais r√°pido com cache")

    async def run_all_tests(self):
        """Executar todos os testes"""
        print("üöÄ INICIANDO DEMONSTRA√á√ÉO DO PINECONEMCPSERVER")
        print("="*80)
        print(f"‚è∞ In√≠cio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # Testar namespaces individuais
            individual_results = await self.test_individual_namespaces()
            
            # Testar m√∫ltiplos namespaces
            multi_results = await self.test_multi_namespaces()
            
            # Testar ferramentas MCP
            mcp_results = await self.test_mcp_tools()
            
            # Testar contexto aeron√°utico
            await self.test_aviation_context()
            
            # Testar performance
            await self.test_performance()
            
            # Resumo final
            print("\n" + "="*80)
            print("üìä RESUMO FINAL")
            print("="*80)
            
            total_individual = len(individual_results)
            successful_individual = sum(1 for r in individual_results.values() if r.get("success", False))
            
            total_multi = len(multi_results)
            successful_multi = sum(1 for r in multi_results.values() if r.get("success", False))
            
            total_mcp = len(mcp_results)
            successful_mcp = sum(1 for r in mcp_results.values() if r.get("success", False))
            
            print(f"‚úÖ Namespaces individuais: {successful_individual}/{total_individual}")
            print(f"‚úÖ M√∫ltiplos namespaces: {successful_multi}/{total_multi}")
            print(f"‚úÖ Ferramentas MCP: {successful_mcp}/{total_mcp}")
            print(f"‚úÖ Total de ferramentas testadas: {successful_individual + successful_multi + successful_mcp}")
            
            print(f"\n‚è∞ Fim: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("üéâ Demonstra√ß√£o conclu√≠da com sucesso!")
            
        except Exception as e:
            logger.log_agent_action(
                agent_name="PineconeDemo",
                action="run_all_tests",
                message=f"Erro na demonstra√ß√£o: {str(e)}",
                user_id="demo_user",
                success=False
            )
            print(f"‚ùå Erro na demonstra√ß√£o: {str(e)}")

async def main():
    """Fun√ß√£o principal"""
    async with PineconeDemo() as demo:
        await demo.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 