#!/usr/bin/env python3
"""
Demonstra√ß√£o do Sistema de Logging Estruturado do Stratus.IA
Sistema de n√≠vel mundial para avia√ß√£o civil brasileira.
"""

import time
import sys
import os

# Adicionar src ao path
sys.path.append('src')

from utils.logging import (
    StratusLogger,
    LogLevel,
    UrgencyLevel,
    get_logger,
    setup_logging,
    log_agent_action,
    log_safety_violation,
    log_api_call,
    log_performance_metric,
    log_regulatory_compliance,
    log_user_interaction
)


def demo_basic_logging():
    """Demonstra√ß√£o de logging b√°sico"""
    print("üõ©Ô∏è  DEMONSTRA√á√ÉO: Logging B√°sico")
    print("=" * 50)
    
    # Configurar logger
    logger = setup_logging(environment="development")
    
    # Log de a√ß√£o de agente
    logger.log_agent_action(
        agent_name="WeatherAgent",
        action="get_metar",
        message="METAR SBGR 151400Z 08008KT 9999 FEW020 SCT100 25/18 Q1018=",
        user_id="pilot_123",
        duration_ms=150.5,
        success=True
    )
    
    # Log de chamada de API
    logger.log_api_call(
        api_name="REDEMET",
        endpoint="/metar/SBGR",
        method="GET",
        status_code=200,
        duration_ms=45.2,
        user_id="pilot_123",
        cache_hit=False
    )
    
    # Log de m√©trica de performance
    logger.log_performance_metric(
        metric_name="response_time",
        value=1.2,
        unit="seconds",
        agent_name="WeatherAgent",
        user_id="pilot_123"
    )
    
    print("‚úÖ Logging b√°sico conclu√≠do\n")


def demo_aviation_context():
    """Demonstra√ß√£o de extra√ß√£o de contexto de avia√ß√£o"""
    print("üõ©Ô∏è  DEMONSTRA√á√ÉO: Contexto de Avia√ß√£o")
    print("=" * 50)
    
    logger = get_logger()
    
    # Mensagens com contexto de avia√ß√£o
    aviation_messages = [
        "Voo de SBGR para SBSP com B737 conforme RBAC 91",
        "METAR KJFK 151400Z 08008KT 9999 FEW020 SCT100 25/18 Q1018=",
        "Frequ√™ncia 118.100 MHz para torre de SBGR",
        "Posi√ß√£o: 23¬∞32‚Ä≤07‚Ä≥S 046¬∞38‚Ä≤34‚Ä≥W",
        "Opera√ß√£o com A320 e E190 conforme IS 91-001"
    ]
    
    for message in aviation_messages:
        context = logger.extract_aviation_context(message)
        urgency = logger.determine_urgency(message)
        
        print(f"üìù Mensagem: {message}")
        print(f"   ICAO Codes: {context['icao_codes']}")
        print(f"   Aircraft Types: {context['aircraft_types']}")
        print(f"   Regulations: {context['regulations']}")
        print(f"   Frequencies: {context['frequencies']}")
        print(f"   Coordinates: {context['coordinates']}")
        print(f"   Urgency: {urgency.value}")
        print()
    
    print("‚úÖ Contexto de avia√ß√£o extra√≠do\n")


def demo_urgency_classification():
    """Demonstra√ß√£o de classifica√ß√£o de urg√™ncia"""
    print("üõ©Ô∏è  DEMONSTRA√á√ÉO: Classifica√ß√£o de Urg√™ncia")
    print("=" * 50)
    
    logger = get_logger()
    
    # Mensagens de diferentes n√≠veis de urg√™ncia
    test_messages = [
        ("Mayday mayday mayday, falha de motor", "EMERGENCY"),
        ("METAR SBGR urgente para decolagem", "PRIORITY"),
        ("Consulta sobre regulamenta√ß√£o geral", "ROUTINE"),
        ("Pan pan pan, combust√≠vel baixo", "EMERGENCY"),
        ("TAF SBSP para pouso", "PRIORITY"),
        ("Informa√ß√µes sobre RBAC 91", "ROUTINE")
    ]
    
    for message, expected_level in test_messages:
        urgency = logger.determine_urgency(message)
        status = "‚úÖ" if urgency.value == expected_level else "‚ùå"
        print(f"{status} {message}")
        print(f"   Classificado como: {urgency.value}")
        print()
    
    print("‚úÖ Classifica√ß√£o de urg√™ncia conclu√≠da\n")


def demo_safety_violations():
    """Demonstra√ß√£o de viola√ß√µes de seguran√ßa"""
    print("üõ©Ô∏è  DEMONSTRA√á√ÉO: Viola√ß√µes de Seguran√ßa")
    print("=" * 50)
    
    logger = get_logger()
    
    # Log de viola√ß√µes de seguran√ßa
    logger.log_safety_violation(
        violation_type="INVALID_ICAO_CODE",
        message="C√≥digo ICAO inv√°lido fornecido: XYZ",
        agent_name="WeatherAgent",
        user_id="pilot_123",
        severity="HIGH"
    )
    
    logger.log_safety_violation(
        violation_type="HALLUCINATION_DETECTED",
        message="Agente inventou informa√ß√µes meteorol√≥gicas",
        agent_name="WeatherAgent",
        user_id="pilot_123",
        severity="CRITICAL"
    )
    
    print("‚úÖ Viola√ß√µes de seguran√ßa logadas\n")


def demo_regulatory_compliance():
    """Demonstra√ß√£o de compliance regulat√≥rio"""
    print("üõ©Ô∏è  DEMONSTRA√á√ÉO: Compliance Regulat√≥rio")
    print("=" * 50)
    
    logger = get_logger()
    
    # Log de compliance regulat√≥rio
    logger.log_regulatory_compliance(
        regulation="RBAC 91",
        compliance_status="COMPLIANT",
        message="Voo VFR com plano de voo adequado",
        agent_name="RegulatoryAgent",
        user_id="pilot_123"
    )
    
    logger.log_regulatory_compliance(
        regulation="RBAC 91",
        compliance_status="VIOLATION",
        message="Voo VFR sem plano de voo obrigat√≥rio",
        agent_name="RegulatoryAgent",
        user_id="pilot_123",
        details={"section": "91.103", "requirement": "flight_plan"}
    )
    
    print("‚úÖ Compliance regulat√≥rio logado\n")


def demo_user_interactions():
    """Demonstra√ß√£o de intera√ß√µes do usu√°rio"""
    print("üõ©Ô∏è  DEMONSTRA√á√ÉO: Intera√ß√µes do Usu√°rio")
    print("=" * 50)
    
    logger = get_logger()
    
    # Log de intera√ß√µes do usu√°rio
    logger.log_user_interaction(
        interaction_type="weather_query",
        message="Qual o METAR do SBGR?",
        user_id="pilot_123",
        session_id="session_456",
        response_time_ms=1200.0
    )
    
    logger.log_user_interaction(
        interaction_type="regulatory_consultation",
        message="Qual a regulamenta√ß√£o para voo VFR noturno?",
        user_id="student_789",
        session_id="session_789",
        response_time_ms=800.0
    )
    
    print("‚úÖ Intera√ß√µes do usu√°rio logadas\n")


def demo_performance_metrics():
    """Demonstra√ß√£o de m√©tricas de performance"""
    print("üõ©Ô∏è  DEMONSTRA√á√ÉO: M√©tricas de Performance")
    print("=" * 50)
    
    logger = get_logger()
    
    # Log de m√©tricas de performance
    logger.log_performance_metric(
        metric_name="response_time",
        value=1.2,
        unit="seconds",
        agent_name="WeatherAgent",
        user_id="pilot_123",
        threshold=2.0
    )
    
    logger.log_performance_metric(
        metric_name="response_time",
        value=3.5,
        unit="seconds",
        agent_name="WeatherAgent",
        user_id="pilot_456",
        threshold=2.0
    )
    
    # Mostrar estat√≠sticas de performance
    stats = logger.get_performance_stats()
    print(f"üìä Estat√≠sticas de Performance:")
    print(f"   Total de logs: {stats['total_logs']}")
    print(f"   Tempo m√©dio por log: {stats['average_log_time_ms']}ms")
    print(f"   Tempo total de logging: {stats['total_log_time_ms']}ms")
    print(f"   Uptime: {stats['uptime_seconds']}s")
    
    print("‚úÖ M√©tricas de performance logadas\n")


def demo_trace_correlation():
    """Demonstra√ß√£o de correla√ß√£o de traces"""
    print("üõ©Ô∏è  DEMONSTRA√á√ÉO: Correla√ß√£o de Traces")
    print("=" * 50)
    
    logger = get_logger()
    
    # Mostrar trace atual
    print(f"üîç Trace ID atual: {logger.trace_id}")
    
    # Criar novo trace
    new_trace = logger.new_trace()
    print(f"üÜï Novo Trace ID: {new_trace}")
    
    # Log com novo trace
    logger.log_agent_action(
        agent_name="TestAgent",
        action="test_action",
        message="Teste de correla√ß√£o de trace",
        user_id="test_user",
        success=True
    )
    
    print("‚úÖ Correla√ß√£o de traces demonstrada\n")


def demo_high_volume_logging():
    """Demonstra√ß√£o de logging de alto volume"""
    print("üõ©Ô∏è  DEMONSTRA√á√ÉO: Logging de Alto Volume")
    print("=" * 50)
    
    logger = get_logger()
    
    start_time = time.time()
    
    # Simular 100 logs r√°pidos
    for i in range(100):
        logger.log_agent_action(
            agent_name=f"Agent_{i % 5}",
            action=f"action_{i}",
            message=f"Test message {i}",
            user_id=f"user_{i}",
            duration_ms=1.0 + (i % 10) * 0.1,
            success=True
        )
    
    end_time = time.time()
    total_time = (end_time - start_time) * 1000  # em ms
    
    print(f"‚ö° 100 logs processados em {total_time:.2f}ms")
    print(f"üìà Taxa: {1000 / (total_time / 100):.0f} logs/segundo")
    
    # Mostrar estat√≠sticas finais
    stats = logger.get_performance_stats()
    print(f"üìä Estat√≠sticas finais:")
    print(f"   Total de logs: {stats['total_logs']}")
    print(f"   Tempo m√©dio por log: {stats['average_log_time_ms']}ms")
    
    print("‚úÖ Logging de alto volume conclu√≠do\n")


def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print("üöÄ STRATUS.IA - SISTEMA DE LOGGING DE N√çVEL MUNDIAL")
    print("=" * 60)
    print("Sistema cr√≠tico de avia√ß√£o com logging estruturado")
    print("=" * 60)
    print()
    
    try:
        # Executar demonstra√ß√µes
        demo_basic_logging()
        demo_aviation_context()
        demo_urgency_classification()
        demo_safety_violations()
        demo_regulatory_compliance()
        demo_user_interactions()
        demo_performance_metrics()
        demo_trace_correlation()
        demo_high_volume_logging()
        
        print("üéâ TODAS AS DEMONSTRA√á√ïES CONCLU√çDAS COM SUCESSO!")
        print("=" * 60)
        print("‚úÖ Sistema de logging de n√≠vel mundial funcionando perfeitamente")
        print("‚úÖ Contexto de avia√ß√£o extra√≠do automaticamente")
        print("‚úÖ Classifica√ß√£o de urg√™ncia operacional")
        print("‚úÖ Viola√ß√µes de seguran√ßa detectadas")
        print("‚úÖ Compliance regulat√≥rio monitorado")
        print("‚úÖ Performance < 5ms por log")
        print("‚úÖ Correla√ß√£o de traces funcionando")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 